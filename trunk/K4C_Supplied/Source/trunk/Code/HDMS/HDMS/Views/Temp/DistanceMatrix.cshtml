@model IEnumerable<HDMS.Models.Order>
@using HDMS.Models
@{
    ViewBag.Title = "DistanceMatrix";
}
   @* <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript">

  var origins = [
    "10.8085784,106.6944176",
    "10.797706,106.644344",
    "10.7810242,106.69887",
    "10.8393967,106.6758406",
    "10.7794068,106.6749303",
    "10.7635787,106.7079099",
    "10.7577048,106.6779864",
    "10.7937941,106.6315128",
    "10.81669812,106.6978132",
    "10.75111284,106.6309334",
    //"10.80527863,106.6427944",
  ];

  var destinations = [
    "10.8085784,106.6944176",
    "10.797706,106.644344",
    "10.7810242,106.69887",
    "10.8393967,106.6758406",
    "10.7794068,106.6749303",
    "10.7635787,106.7079099",
    "10.7577048,106.6779864",
    "10.7937941,106.6315128",
    "10.81669812,106.6978132",
    "10.75111284,106.6309334",
    //"10.80527863,106.6427944",
  ];

  var query = {
    origins: origins,
    destinations: destinations,
    travelMode: google.maps.TravelMode.DRIVING,
    unitSystem: google.maps.UnitSystem.METRIC
  };

  var map, dms;
  var dirService, dirRenderer;
  var highlightedCell;
  var routeQuery;
  var bounds;
  var panning = false;

  function initialize() {
    var mapOptions = {
      zoom: 12,
      center: new google.maps.LatLng(10.784574, 106.664788),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }
    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    createTable();

    for (var i = 0; i < origins.length; i++) {
      //origins[i] += ' Station, London, UK';
    }

    for (var j = 0; j < destinations.length; j++) {
      //destinations[j] += ', London, UK';
    }

    dms = new google.maps.DistanceMatrixService();

    dirService = new google.maps.DirectionsService();
    dirRenderer = new google.maps.DirectionsRenderer({preserveViewport:true});
    dirRenderer.setMap(map);

    google.maps.event.addListener(map, 'idle', function() {
      if (panning) {
        map.fitBounds(bounds);
        panning = false;
      }
    });
    
    updateMatrix();
  }

  function updateMatrix() {
    dms.getDistanceMatrix(query, function(response, status) {
        if (status == "OK") {
          populateTable(response.rows);
        }
      }
    );
  }

  function createTable() {
    var table = document.getElementById('matrix');
    var tr = addRow(table);
    addElement(tr);
    for (var j = 0; j < destinations.length; j++) {
      var td = addElement(tr);
      td.setAttribute("class", "destination");
      td.appendChild(document.createTextNode(destinations[j]));
    }

    for (var i = 0; i < origins.length; i++) {
      var tr = addRow(table);
      var td = addElement(tr);
      td.setAttribute("class", "origin");
      td.appendChild(document.createTextNode(origins[i]));
      for (var j = 0; j < destinations.length; j++) {
        var td = addElement(tr, 'element-' + i + '-' + j);
        td.onmouseover = getRouteFunction(i,j);
        td.onclick = getRouteFunction(i,j);
      }
    }
  }

  function populateTable(rows) {
    for (var i = 0; i < rows.length; i++) {
      for (var j = 0; j < rows[i].elements.length; j++) {
        var distance = rows[i].elements[j].distance.text;
        var duration = rows[i].elements[j].duration.text;
        var td = document.getElementById('element-' + i + '-' + j);
        td.innerHTML = distance + "<br/>" + duration;
      }
    }
  }

  function getRouteFunction(i, j) {
    return function() {
      routeQuery = {
        origin: origins[i],
        destination: destinations[j],
        travelMode: query.travelMode,
        unitSystem: query.unitSystem,
      };
      
      if (highlightedCell) {
        highlightedCell.style.backgroundColor="#ffffff";
      }
      highlightedCell = document.getElementById('element-' + i + '-' + j);
      highlightedCell.style.backgroundColor="#e0ffff";
      showRoute();
    }
  }

  function showRoute() {
    dirService.route(routeQuery, function(result, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        dirRenderer.setDirections(result);
        bounds = new google.maps.LatLngBounds();
        bounds.extend(result.routes[0].overview_path[0]);
        var k = result.routes[0].overview_path.length;
        bounds.extend(result.routes[0].overview_path[k-1]);
        panning = true;
        map.panTo(bounds.getCenter());        
      }
    });
  }

  function updateMode() {
    switch (document.getElementById("mode").value) {
      case "driving":
        query.travelMode = google.maps.TravelMode.DRIVING;
        break;
      case "walking":
        query.travelMode = google.maps.TravelMode.WALKING;
        break;
    }
    updateMatrix();
    if (routeQuery) {
      routeQuery.travelMode = query.travelMode;
      showRoute();
    }
  }

  function updateUnits() {
    switch (document.getElementById("units").value) {
      case "km":
        query.unitSystem = google.maps.UnitSystem.METRIC;
        break;
      case "mi":
        query.unitSystem = google.maps.UnitSystem.IMPERIAL;
        break;
    }
    updateMatrix();
  }

  function addRow(table) {
    var tr = document.createElement('tr');
    table.appendChild(tr);
    return tr;
  }

  function addElement(tr, id) {
    var td = document.createElement('td');
    if (id) {
      td.setAttribute('id', id);
    }
    tr.appendChild(td);
    return td;
  }
    </script>
    <style>
        body
        {
            font-family: sans-serif;
        }
        
        #container
        {
            position: absolute;
            width: 500px;
            left: 5px;
            top: 5px;
        }
        
        #map
        {
            position: absolute;
            width: 500px;
            height: 500px;
            border: 1px solid grey;
        }
        
        #matrix
        {
            /*position: absolute;
            top: 310px;*/
            font-size: 10px;
            border-collapse: collapse;
        }
        
        #controls
        {
            right: 5px;
            top: 240px;
            text-align: right;
            position: absolute;
        }
        
        .origin, .destination
        {
            font-weight: bold;
            text-align: center;
            background-color: #e0ffe0;
        }
        
        td
        {
            border: 1px solid grey;
            width: 80px;
            cursor: default;
            background-color: #ffffff;
        }
    </style>

    <div class="row-fluid">
        <div id="map"class="span6">
        </div>
        <div  class="span6" style="overflow:scroll;float: right;">            
            <table id="matrix">
            </table>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            initialize();
        });
    </script>
*@
@{var context = new HDMSEntities();}
<table class="table table-striped table-bordered">
    <thead>
        <th></th>
        @foreach (var toOrder in Model)
        {
            <th><strong>#@toOrder.OrderId</strong></th>
        }
    </thead>
    <tbody>        
            @foreach (var fromOrder in Model)
            {
                <tr>
                    @{var fromOrderId = fromOrder.OrderId;}
                    <td><strong>#@fromOrderId</strong></td>
                    @foreach (var toOrder in Model)
                    {
                        var toOrderId = toOrder.OrderId;
                        if (fromOrderId == toOrderId)
                        {
                            <td>0</td>
                        }
                        else
                        {
                            var distanceBetweenOrder = context.Distances.Where(dbo => (dbo.FromOrderId == fromOrder.OrderId && dbo.ToOrderId == toOrder.OrderId)
                                       || (dbo.FromOrderId == toOrder.OrderId && dbo.ToOrderId == fromOrder.OrderId)).FirstOrDefault();
                            if (distanceBetweenOrder != null)
                            {
                                <td>@distanceBetweenOrder.Distance</td>
                            }
                            else
                            {
                                <td>undefined</td>
                            }
                        }
                    }
                </tr>
            }
        
    </tbody>
</table>